package io.storj;

import java.io.Serializable;
import java.util.Objects;

/**
 * Represents the redundancy scheme used for erasure encoding data on the network.
 */
public class RedundancyScheme implements Serializable {

    private RedundancyAlgorithm algorithm;
    private short required;
    private short repair;
    private short success;
    private short total;
    private int shareSize;

    RedundancyScheme(io.storj.libuplink.mobile.RedundancyScheme scheme) {
        this.algorithm = RedundancyAlgorithm.fromValue(scheme.getAlgorithm());
        this.required = scheme.getRequiredShares();
        this.repair = scheme.getRepairShares();
        this.success = scheme.getOptimalShares();
        this.total = scheme.getTotalShares();
        this.shareSize = scheme.getShareSize();
    }

    /**
     * Returns the algorithm for erasure encoding.
     *
     * @return a {@link RedundancyAlgorithm}
     */
    public RedundancyAlgorithm getAlgorithm() {
        return algorithm;
    }

    /**
     * Returns the required number of erasure share to recover the original data.
     *
     * @return the required number of erasure shares
     */
    public short getRequiredShares() {
        return required;
    }

    /**
     * Returns the minimum number of safe erasure shares that can remain before a repair is
     * triggered.
     *
     * @return the minimum number of safe erasure shares
     */
    public short getRepairThreshold() {
        return repair;
    }

    /**
     * Returns the desired total number of erasure shares for a segment.
     *
     * @return the desired number of erasure shares
     */
    public short getSuccessShares() {
        return success;
    }

    /**
     * Returns the total number of erasure shares generated by the erasure encoding.
     *
     * @return the total number of erasure shares
     */
    public short getTotalShares() {
        return total;
    }

    /**
     * Returns the size of the erasure shares.
     *
     * @return the erasure share size in bytes
     */
    public int getShareSize() {
        return shareSize;
    }

    /**
     * Two {@link RedundancyScheme} objects are equal if their erasure encoding algorithm, number of
     * required, repair, success, and total erasure shares, and erasure share size are all equal.
     *
     * @return <code>true</code> if this object is the same as the specified object;
     *          <code>false</code> otherwise.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        RedundancyScheme that = (RedundancyScheme) o;
        return required == that.required &&
                repair == that.repair &&
                success == that.success &&
                total == that.total &&
                shareSize == that.shareSize &&
                algorithm == that.algorithm;
    }

    /**
     * The hash code value of {@link RedundancyScheme} is the hash code value of its erasure
     * encoding algorithm, number of required, repair, success, and total erasure shares, and
     * erasure share size.
     *
     * @return a hash code value for this object
     */
    @Override
    public int hashCode() {
        return Objects.hash(algorithm, required, repair, success, total, shareSize);
    }

    io.storj.libuplink.mobile.RedundancyScheme internal() {
        io.storj.libuplink.mobile.RedundancyScheme scheme = new io.storj.libuplink.mobile.RedundancyScheme();
        if (algorithm != null) {
            scheme.setAlgorithm(algorithm.getValue());
        }
        scheme.setRequiredShares(required);
        scheme.setRepairShares(repair);
        scheme.setOptimalShares(success);
        scheme.setTotalShares(total);
        scheme.setShareSize(shareSize);
        return scheme;
    }

    private RedundancyScheme(Builder builder) {
        this.algorithm = builder.algorithm;
        this.required = builder.required;
        this.repair = builder.repair;
        this.success = builder.success;
        this.total = builder.total;
        this.shareSize = builder.shareSize;
    }

    /**
     * Builder for {@link RedundancyScheme} objects.
     */
    public static class Builder {

        private RedundancyAlgorithm algorithm;
        private short required;
        private short repair;
        private short success;
        private short total;
        private int shareSize;

        /**
         * Determines the algorithm to be used for erasure encoding.
         *
         * @param algorithm a {@link RedundancyAlgorithm}
         * @return a reference to this object
         */
        public Builder setAlgorithm(RedundancyAlgorithm algorithm) {
            this.algorithm = algorithm;
            return this;
        }

        /**
         * Determines the number of required erasure shares.
         *
         * @param count the required number of erasure shares
         * @return a reference to this object
         */
        public Builder setRequiredShares(short count) {
            this.required = count;
            return this;
        }

        /**
         * Determines the minimum number of safe erasure shares that can remain before a repair is
         * triggered.
         *
         * @param count the minimum number of safe erasure shares
         * @return a reference to this object
         */
        public Builder setRepairShares(short count) {
            this.repair = count;
            return this;
        }

        /**
         * Determines the desired total number of erasure shares for a segment.
         *
         * @param count the desired total number of erasure shares
         * @return a reference to this object
         */
        public Builder setSuccessShares(short count) {
            this.success = count;
            return this;
        }

        /**
         * Determines the total number of erasure shares to generate by the erasure encoding.
         *
         * @param count the total number of erasure shares
         * @return a reference to this object
         */
        public Builder setTotalShares(short count) {
            this.total = count;
            return this;
        }

        /**
         * Determine the size of erasure shares.
         *
         * @param size the size in bytes
         * @return a reference to this object
         */
        public Builder setShareSize(int size) {
            this.shareSize = size;
            return this;
        }

        /**
         * Creates the new {@link RedundancyScheme} object from this builder.
         *
         * @return an {@link RedundancyScheme}
         */
        public RedundancyScheme build() {
            return new RedundancyScheme(this);
        }
    }
}
